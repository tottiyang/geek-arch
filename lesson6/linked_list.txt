推导大O阶有一下三种规则：
用常数1取代运行时间中的所有加法常数
只保留最高阶项
去除最高阶的常数

一个算法的空间复杂度只考虑在运行过程中为局部变量分配的存储空间的大小，它包括为参数表中形参变量分配的存储空间和为在函数体中定义的局部变量分配的存储空间两个部分。
若一个算法为递归算法，其空间复杂度为递归所使用的堆栈空间的大小，它等于一次调用所分配的临时存储空间的大小乘以被调用的次数(即为递归调用的次数加1，这个1表示开始进行的一次非递归调用)。
算法的空间复杂度一般也以数量级的形式给出。
如当一个算法的空间复杂度为一个常量，即不随被处理数据量n的大小而改变时，可表示为O(1)；
当一个算法的空间复杂度与以2为底的n的对数成正比时，可表示为O(log2n)；
当一个算法的空间复杂度与n成线性比例关系时，可表示为O(n).
若形参为数组，则只需要为它分配一个存储由实参传送来的一个地址指针的空间，即一个机器字长空间；
若形参为引用方式，则也只需要为其分配存储一个地址的空间，用它来存储对应实参变量的地址，以便由系统自动引用实参变量。

方法1：从链表2中查找是否有链表1的的元素
a.链表1遍历入哈希表
b.链表2遍历在哈希表中查找
c.如有重复，则返回该元素；无重复，则无合并点
时间复杂度o(n)，空间复杂度为o(n)

方法2：如果链表重合，则后几个节点是一样的
a.先把链表反转
b.同时遍历两个链表比较，找到第一个不同点，返回上一个节点
时间复杂度o(n)，空间复杂度为o(1)